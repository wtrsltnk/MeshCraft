#include "CToolManager.h"

///////////////////////////////////////////////////////////////////////////////////////////
// Static Declaration
///////////////////////////////////////////////////////////////////////////////////////////
CToolManager* CToolManager::m_pInstance = NULL;

///////////////////////////////////////////////////////////////////////////////////////////
// Constructor en Deconstructor
///////////////////////////////////////////////////////////////////////////////////////////
CToolManager::CToolManager()
{
	m_pCurrentTool = NULL;

		m_pCamera = new CToolCamera();
}

CToolManager::~CToolManager()
{
}

///////////////////////////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
///////////////////////////////////////////////////////////////////////////////////////////
CToolManager* CToolManager::GetInstance()
{
	if ( !m_pInstance )
	{
		m_pInstance = new CToolManager();
	}

	return m_pInstance;
}

///////////////////////////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
///////////////////////////////////////////////////////////////////////////////////////////
CBaseTool* CToolManager::GetCurrentTool()
{
	return m_pCurrentTool;
}

///////////////////////////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
///////////////////////////////////////////////////////////////////////////////////////////
CBaseTool* CToolManager::SelectTool(tools_t tool)
{
	switch ( tool )
	{
	case tool_camera:
		m_pCurrentTool = m_pCamera;
		break;
		
	case tool_select:
		m_pCurrentTool = NULL;
		break;
	}
	return m_pCurrentTool;
}

///////////////////////////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
///////////////////////////////////////////////////////////////////////////////////////////
void CToolManager::DeselectTool()
{
	m_pCurrentTool = NULL;
}