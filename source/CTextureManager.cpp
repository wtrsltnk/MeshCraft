#include "CTextureManager.h"

CTextureManager*	CTextureManager::m_pInstance			= NULL;

///////////////////////////////////////////////////////////////////////////////////////////
// Constructor en Deconstructor
///////////////////////////////////////////////////////////////////////////////////////////
CTextureManager::CTextureManager()
{
}

CTextureManager::~CTextureManager()
{
}

///////////////////////////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
///////////////////////////////////////////////////////////////////////////////////////////
CTextureManager* CTextureManager::GetInstance()
{
	if (m_pInstance == NULL)
		m_pInstance = new CTextureManager();

	return m_pInstance;
}

///////////////////////////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
///////////////////////////////////////////////////////////////////////////////////////////
int CTextureManager::AddTexture(string filename)
{
	AUX_RGBImageRec *pImage;
	GLuint index = 0;

	pImage = LoadBMP( filename );

	if ( pImage != NULL && pImage->data != NULL )
	{
		glGenTextures(1, &index);

		glBindTexture(GL_TEXTURE_2D, index);
		glTexImage2D(GL_TEXTURE_2D, 0, 3, pImage->sizeX, pImage->sizeY, 0, GL_RGB, GL_UNSIGNED_BYTE, pImage->data);
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);

		free(pImage->data);
		free(pImage);
	}

	return index;
}

///////////////////////////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
///////////////////////////////////////////////////////////////////////////////////////////
AUX_RGBImageRec* CTextureManager::LoadBMP(string filename)
{
	FILE *File = NULL;

	if (!filename.c_str())
	{
		return NULL;
	}

	File = fopen(filename.c_str(), "r");

	if (File)
	{
		fclose(File);
		return auxDIBImageLoad(filename.c_str());
	}

	return NULL;
}

///////////////////////////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
///////////////////////////////////////////////////////////////////////////////////////////
void CTextureManager::UseTexture(int index)
{
	glBindTexture(GL_TEXTURE_2D, index);
}

///////////////////////////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
///////////////////////////////////////////////////////////////////////////////////////////
void CTextureManager::ClearTexture(GLuint index)
{
	glDeleteTextures(1, &index);
}
