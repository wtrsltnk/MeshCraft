///////////////////////////////////////////////////////////////////////////////////////////
// Meshcraft 3D Format
// 
// 
// 
// 
// 
// 
// 
// 
///////////////////////////////////////////////////////////////////////////////////////////
#ifndef MESHCRAFT_FORMAT_H
#define MESHCRAFT_FORMAT_H

#include "wiskunde.h"

////////////////////////////////////////////////
// Defines
////////////////////////////////////////////////
typedef float UV[2];

////////////////////////////////////////////////
// Bonecontroller
////////////////////////////////////////////////
typedef struct
{
	int						nBoneIndex;

	Vector					vPosition;
	Vector					vRotation;
} BoneController_t;


////////////////////////////////////////////////
// Frame
////////////////////////////////////////////////
typedef struct
{
	int						nNumBoneControllers;
	BoneController_t*		pBoneControllers;
} KeyFrame_t;



////////////////////////////////////////////////
// Animation
////////////////////////////////////////////////
typedef struct
{
	char					szName[64];

	int						nNumKeyFrames;
	KeyFrame_t*				pKeyFrames;
} Animation_t;


////////////////////////////////////////////////
// Bone
////////////////////////////////////////////////
typedef struct
{
	char					szName[64];

	char					szParent[64];
	Vector					vBasePosition;
	Vector					vBaseRotation;
} Bone_t;


////////////////////////////////////////////////
// Skeleton
////////////////////////////////////////////////
typedef struct
{
	char					szName[64];

	int						nNumBones;
	Bone_t*					pBones;
} Skeleton_t;


////////////////////////////////////////////////
// Material
////////////////////////////////////////////////
typedef struct
{
	char					szName[64];

	Color					cAmbient;
	Color					cDiffuse;
	Color					cSpecular;
	Color					cEmission;

	float					fShininess;
	float					fTransparency;

	char					szTexture[128];
} Material_t;


////////////////////////////////////////////////
// Vertex
////////////////////////////////////////////////
typedef struct
{
	Vector					vPosition;
	Vector					vNormal;
} Vertex_t;


////////////////////////////////////////////////
// Triangle
////////////////////////////////////////////////
typedef struct
{
	int						nVertexIndices[3];
	UV						pUV[3];
	Vector					vNormal;
} Triangle_t;


////////////////////////////////////////////////
// Mesh
////////////////////////////////////////////////
typedef struct
{
	char					szName[64];

	int						nNumVertices;
	Vertex_t				pVertices;

	int						nNumTriangles;
	Triangle_t*				pTriangles;

	int						nNumMaterials;
	Material_t*				pMaterials;
} Mesh_t;


////////////////////////////////////////////////
// ObjectPart
////////////////////////////////////////////////
typedef struct
{
	char					szName[64];

	int						nNumMeshes;
	Mesh_t*					pMeshes;
} ObjectPart_t;


////////////////////////////////////////////////
// Object
////////////////////////////////////////////////
typedef struct
{
	char					szName[64];

	Skeleton_t				Skeleton;

	int						nNumAnimations;
	Animation_t*			pAnimations;

	int						nNumObjectParts;
	ObjectPart_t*			pObjectParts;
} Object_t;



////////////////////////////////////////////////
// Scene
////////////////////////////////////////////////
typedef struct
{
	char					szName[64];

	int						nNumObjects;
	Object_t*				pObjects;
} Scene_t;
#endif