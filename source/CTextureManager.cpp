#include "CTextureManager.h"
#include <stb_image.h>

CTextureManager*	CTextureManager::m_pInstance			= NULL;

///////////////////////////////////////////////////////////////////////////////////////////
// Constructor en Deconstructor
///////////////////////////////////////////////////////////////////////////////////////////
CTextureManager::CTextureManager()
{
}

CTextureManager::~CTextureManager()
{
}

///////////////////////////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
///////////////////////////////////////////////////////////////////////////////////////////
CTextureManager* CTextureManager::GetInstance()
{
	if (m_pInstance == NULL)
		m_pInstance = new CTextureManager();

	return m_pInstance;
}

///////////////////////////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
///////////////////////////////////////////////////////////////////////////////////////////
int CTextureManager::AddTexture(string filename)
{
	GLuint index = 0;
    int x,y,n;
    unsigned char *data = stbi_load(filename.c_str(), &x, &y, &n, 3);

    if (data != nullptr)
	{
		glGenTextures(1, &index);

		glBindTexture(GL_TEXTURE_2D, index);
        glTexImage2D(GL_TEXTURE_2D, 0, 3, x, y, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);

        stbi_image_free(data);
    }

	return index;
}

///////////////////////////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
///////////////////////////////////////////////////////////////////////////////////////////
void CTextureManager::UseTexture(int index)
{
	glBindTexture(GL_TEXTURE_2D, index);
}

///////////////////////////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
///////////////////////////////////////////////////////////////////////////////////////////
void CTextureManager::ClearTexture(GLuint index)
{
	glDeleteTextures(1, &index);
}
